create schema if not exists "yunoflow";

create table if not exists "yunoflow"."workflows" (
    id uuid not null default gen_random_uuid(),
    name text not null,
    description text,
    dag jsonb,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

alter table "yunoflow"."workflows" enable row level security;

create table if not exists "yunoflow"."workflow_runs" (
    id uuid not null default gen_random_uuid(),
    workflow_id uuid references "yunoflow"."workflows"(id) on delete cascade,
    status text not null default 'queued',
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now(),
    started_at timestamptz,
    ended_at timestamptz
);

alter table "yunoflow"."workflow_runs" enable row level security;

create table if not exists "yunoflow"."task_queue" (
    id bigint generated by default as identity primary key,
    workflow_id uuid references "yunoflow"."workflows"(id) on delete cascade,
    run_id uuid references "yunoflow"."workflow_runs"(id) on delete cascade,
    task_name text not null,
    payload jsonb,
    status text not null default 'pending',
    created_at timestamptz not null default now(),
    scheduled_at timestamptz default now(),
    executed_at timestamptz
);

alter table "yunoflow"."task_queue" enable row level security;

create table if not exists "yunoflow"."task_dependencies" (
    workflow_id uuid references "yunoflow"."workflows"(id) on delete cascade,
    task_name text not null,
    depends_on text not null
);

alter table "yunoflow"."task_dependencies" enable row level security;

create unique index if not exists workflows_pkey on "yunoflow"."workflows"(id);
create unique index if not exists workflow_runs_pkey on "yunoflow"."workflow_runs"(id);

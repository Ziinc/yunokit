
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Sparkles, RotateCw, ArrowRight, Check } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card } from "@/components/ui/card";

interface AIAssistPanelProps {
  currentContent: string;
  onApplySuggestion: (suggestion: string) => void;
  editorType: "markdown" | "json" | "block";
}

export const AIAssistPanel: React.FC<AIAssistPanelProps> = ({ 
  currentContent, 
  onApplySuggestion,
  editorType
}) => {
  const [prompt, setPrompt] = useState("");
  const [generating, setGenerating] = useState(false);
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const { toast } = useToast();

  // Mock AI generation - in a real app this would call an AI API
  const generateSuggestion = () => {
    if (!prompt.trim()) {
      toast({
        title: "Please enter a prompt",
        description: "You need to provide instructions for the AI",
        variant: "destructive",
      });
      return;
    }
    
    setGenerating(true);
    
    // Simulate network delay
    setTimeout(() => {
      let suggestion;
      
      if (editorType === "markdown") {
        suggestion = `# AI Generated Content

## Based on your prompt: "${prompt}"

This is an AI-generated markdown content sample that would typically be created by calling an AI service like OpenAI's GPT.

### Key Features
- Responsive to your prompt
- Formatted in markdown
- Ready to use in your project

> The actual implementation would connect to a real AI service for content generation.

**Current content length:** ${currentContent.length} characters

---

For a real implementation, this would contain generated content that matches your prompt: "${prompt}".
        `;
      } else if (editorType === "json") {
        suggestion = `{
  "title": "AI Generated JSON",
  "description": "Based on your prompt: '${prompt}'",
  "generated": true,
  "timestamp": "${new Date().toISOString()}",
  "sections": [
    {
      "id": 1,
      "name": "Introduction",
      "content": "This is a sample JSON structure generated by AI."
    },
    {
      "id": 2,
      "name": "Details",
      "content": "In a real implementation, this would contain content based on your prompt."
    }
  ],
  "metadata": {
    "prompt": "${prompt}",
    "originalLength": ${currentContent.length},
    "aiModel": "Mock AI Service"
  }
}`;
      } else if (editorType === "block") {
        suggestion = `[
  {
    "id": "ai1",
    "type": "heading",
    "content": "AI Generated Content"
  },
  {
    "id": "ai2",
    "type": "paragraph",
    "content": "This is a sample block content generated based on your prompt: '${prompt}'. In a real implementation, this would be generated by an AI service."
  },
  {
    "id": "ai3",
    "type": "list",
    "content": "- Generated based on your prompt\\n- Formatted for block editor\\n- Ready to use in your project"
  },
  {
    "id": "ai4",
    "type": "quote",
    "content": "The future of content creation is collaborative AI assistance."
  },
  {
    "id": "ai5",
    "type": "image",
    "content": "https://via.placeholder.com/800x400?text=AI+Generated+Image"
  }
]`;
      }
      
      setSuggestions([suggestion, ...suggestions.slice(0, 2)]);
      setGenerating(false);
      setPrompt("");
      
      toast({
        title: "AI suggestion ready",
        description: "New content has been generated based on your prompt",
      });
    }, 1500);
  };

  return (
    <div className="flex flex-col h-full">
      <h3 className="text-lg font-semibold mb-3 flex items-center">
        <Sparkles size={18} className="mr-2 text-cms-purple" />
        AI Content Assistant
      </h3>
      
      <div className="space-y-4">
        <div>
          <Label htmlFor="ai-prompt">What would you like the AI to help with?</Label>
          <div className="flex gap-2 mt-1">
            <Input
              id="ai-prompt"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder={`E.g. "Rewrite this ${editorType} content to be more engaging"`}
              className="flex-1"
              disabled={generating}
            />
            <Button 
              onClick={generateSuggestion} 
              disabled={generating || !prompt.trim()}
              className="gap-2"
            >
              {generating ? <RotateCw className="animate-spin" size={16} /> : <ArrowRight size={16} />}
              {generating ? "Generating..." : "Generate"}
            </Button>
          </div>
        </div>

        <Tabs defaultValue="suggestions">
          <TabsList className="w-full">
            <TabsTrigger value="suggestions" className="flex-1">AI Suggestions</TabsTrigger>
            <TabsTrigger value="templates" className="flex-1">Templates</TabsTrigger>
          </TabsList>
          
          <TabsContent value="suggestions" className="mt-4 space-y-3">
            {suggestions.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <p>No suggestions yet. Enter a prompt and click "Generate" to create content.</p>
              </div>
            ) : (
              suggestions.map((suggestion, index) => (
                <Card key={index} className="p-4 border-l-4 border-l-primary">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-medium">Suggestion {index + 1}</h4>
                    <Button 
                      size="sm" 
                      className="gap-1"
                      onClick={() => onApplySuggestion(suggestion)}
                    >
                      <Check size={14} />
                      Apply
                    </Button>
                  </div>
                  <div className="max-h-48 overflow-auto bg-muted/50 p-3 rounded text-sm font-mono">
                    {suggestion.substring(0, 300)}
                    {suggestion.length > 300 && "..."}
                  </div>
                </Card>
              ))
            )}
          </TabsContent>
          
          <TabsContent value="templates" className="mt-4 space-y-3">
            <Card 
              className="p-4 border-l-4 border-l-cms-green cursor-pointer hover:bg-muted/30"
              onClick={() => {
                let template;
                
                if (editorType === "markdown") {
                  template = `# Project Documentation

## Overview
A brief description of the project goes here.

## Features
- Feature 1
- Feature 2
- Feature 3

## Getting Started
Instructions on how to get started with the project.

## FAQ
Common questions and answers.

---

*Last updated: ${new Date().toLocaleDateString()}*`;
                } else if (editorType === "json") {
                  template = `{
  "product": {
    "name": "Sample Product",
    "description": "This is a sample product description",
    "price": 99.99,
    "currency": "USD",
    "categories": ["Category 1", "Category 2"],
    "attributes": {
      "color": "Blue",
      "size": "Medium",
      "weight": "500g"
    },
    "inStock": true,
    "images": [
      {
        "url": "https://example.com/image1.jpg",
        "alt": "Product front view"
      },
      {
        "url": "https://example.com/image2.jpg",
        "alt": "Product side view"
      }
    ]
  }
}`;
                } else if (editorType === "block") {
                  template = `[
  {
    "id": "t1",
    "type": "heading",
    "content": "Getting Started Guide"
  },
  {
    "id": "t2",
    "type": "paragraph",
    "content": "Welcome to our product! This guide will help you get started quickly and efficiently."
  },
  {
    "id": "t3",
    "type": "heading",
    "content": "Initial Setup"
  },
  {
    "id": "t4",
    "type": "list",
    "content": "1. Download the software\\n2. Install using the wizard\\n3. Configure your preferences\\n4. Start creating!"
  },
  {
    "id": "t5",
    "type": "quote",
    "content": "Our users typically save 4 hours per week after fully adopting our solution."
  },
  {
    "id": "t6",
    "type": "image",
    "content": "https://via.placeholder.com/800x400?text=Dashboard+Screenshot"
  }
]`;
                }
                
                onApplySuggestion(template);
                toast({
                  title: "Template applied",
                  description: "The template has been applied to your editor",
                });
              }}
            >
              <div className="flex justify-between items-center mb-2">
                <h4 className="font-medium">Documentation Template</h4>
                <Button size="sm" variant="ghost" className="gap-1">
                  <Check size={14} />
                  Use
                </Button>
              </div>
              <p className="text-sm text-muted-foreground">A standard template for project documentation or product information.</p>
            </Card>
            
            <Card 
              className="p-4 border-l-4 border-l-cms-blue cursor-pointer hover:bg-muted/30"
              onClick={() => {
                let template;
                
                if (editorType === "markdown") {
                  template = `# Weekly Newsletter: ${new Date().toLocaleDateString()}

## Top Stories
- Story 1
- Story 2
- Story 3

## Featured Article
This is where the main article would go.

## Upcoming Events
- Event 1 - Date
- Event 2 - Date

## Did You Know?
Interesting fact goes here.

---

*Subscribe for more updates*`;
                } else if (editorType === "json") {
                  template = `{
  "newsletter": {
    "issue": "001",
    "date": "${new Date().toISOString()}",
    "title": "Weekly Update",
    "greeting": "Hello subscribers!",
    "stories": [
      {
        "title": "Main Story Title",
        "summary": "Brief summary of the main story",
        "link": "https://example.com/story1"
      },
      {
        "title": "Secondary Story",
        "summary": "Brief summary of the secondary story",
        "link": "https://example.com/story2"
      }
    ],
    "events": [
      {
        "name": "Upcoming Webinar",
        "date": "${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()}",
        "link": "https://example.com/register"
      }
    ]
  }
}`;
                } else if (editorType === "block") {
                  template = `[
  {
    "id": "n1",
    "type": "heading",
    "content": "Weekly Newsletter: ${new Date().toLocaleDateString()}"
  },
  {
    "id": "n2",
    "type": "paragraph",
    "content": "Welcome to this week's newsletter! Here's what we've got for you."
  },
  {
    "id": "n3",
    "type": "heading",
    "content": "Headline News"
  },
  {
    "id": "n4",
    "type": "image",
    "content": "https://via.placeholder.com/800x400?text=Featured+Image"
  },
  {
    "id": "n5",
    "type": "paragraph",
    "content": "Our main story this week focuses on the latest developments in our industry."
  },
  {
    "id": "n6",
    "type": "quote",
    "content": "The best way to predict the future is to create it."
  },
  {
    "id": "n7",
    "type": "list",
    "content": "## Upcoming Events\\n- Virtual Conference: June 15\\n- Product Demo: June 22\\n- Community Meetup: June 29"
  }
]`;
                }
                
                onApplySuggestion(template);
                toast({
                  title: "Template applied",
                  description: "The newsletter template has been applied to your editor",
                });
              }}
            >
              <div className="flex justify-between items-center mb-2">
                <h4 className="font-medium">Newsletter Template</h4>
                <Button size="sm" variant="ghost" className="gap-1">
                  <Check size={14} />
                  Use
                </Button>
              </div>
              <p className="text-sm text-muted-foreground">A template for creating newsletters or regular updates for your audience.</p>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};
